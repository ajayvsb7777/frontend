{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qlWjT00XqvdA"
      },
      "outputs": [],
      "source": [
        "//Packages, models and configurations\n",
        "var express = require('express');\n",
        "var app = express();\n",
        "var bodyParser = require('body-parser');\n",
        "var router = express.Router();\n",
        "var morgan = require('morgan');\n",
        "var mongoose = require('mongoose');\n",
        "var jwt = require('jsonwebtoken');\n",
        "var validator = require('email-validator');\n",
        "var nodemailer = require('nodemailer');\n",
        "var randtoken = require('rand-token');\n",
        "var User = require('./models/user');\n",
        "var TempUser = require('./models/tempUser');\n",
        "var Board = require('./models/board');\n",
        "var Card = require('./models/card');\n",
        "var env = process.env.NODE_ENV;\n",
        "var config = require('./config')[env];\n",
        "\n",
        "//Configuration\n",
        "mongoose.connect(config.db); //connect to database\n",
        "app.set('secret', config.secret); //secret variable\n",
        "app.use(morgan(\"dev\")); //log the requests to the console\n",
        "app.use(bodyParser.json());\n",
        "app.use(bodyParser.urlencoded({\"extended\" : false}));\n",
        "\n",
        "var smtpConfig = {\n",
        "    host: 'smtp.gmail.com',\n",
        "    port: 465,\n",
        "    secure: true, // use SSL\n",
        "    auth: {\n",
        "        user: config.email,\n",
        "        pass: config.password\n",
        "    }\n",
        "};\n",
        "var transporter = nodemailer.createTransport(smtpConfig);\n",
        "\n",
        "/*===========================\n",
        "          User API\n",
        "============================*/\n",
        "\n",
        "//login with existing user\n",
        "// body: username, password\n",
        "// params: ...\n",
        "// headers: x-platform\n",
        "router.post('/users/authenticate', function(req, res) {\n",
        "  User.findOne({\n",
        "    username: req.body.username\n",
        "  }, function(err, user) {\n",
        "    if (err) throw err;\n",
        "    if (!user) { //If user does not exists\n",
        "      res.json({ \"success\": false, \"message\": 'Authentication failed. User not found.' });\n",
        "    } else if (user) { //If user exists\n",
        "      //Check if password matches\n",
        "      user.comparePassword(req.body.password, function(err, isMatch) {\n",
        "        if (err) throw err;\n",
        "        if(!isMatch) { //if password does not match\n",
        "          res.json({ \"success\": false, \"message\": 'Authentication failed. Wrong password.' });\n",
        "        } else {\n",
        "          //if password is right, create a token\n",
        "          if(req.headers['x-platform'].toString().trim() === 'web') {\n",
        "            //if platform is web, token expires\n",
        "            var token = jwt.sign(user, app.get('secret'), {\n",
        "              expiresIn: 86400 //expires in 24 hours\n",
        "            });\n",
        "            res.json({ \"success\": true, \"message\": 'Successfully authenticated',\n",
        "            \"token\": token, \"user\": user });\n",
        "          } else if(req.headers['x-platform'].toString().trim() === 'android') {\n",
        "            //if platform is android, token never expires\n",
        "            var token = jwt.sign(user, app.get('secret'), {});\n",
        "            res.json({ \"success\": true, \"message\": 'Successfully authenticated',\n",
        "            \"token\": token, \"user\": user });\n",
        "          } else {\n",
        "            res.json({ \"success\": false, \"message\": 'Authentication failed. Header x-platform is not valid' });\n",
        "          }\n",
        "        }\n",
        "      });\n",
        "    }\n",
        "  });\n",
        "});\n",
        "\n",
        "//register a new user\n",
        "// body: username, email, password\n",
        "// params: ...\n",
        "// headers: x-platform\n",
        "router.post('/users/register', function(req, res) {\n",
        "  User.findOne({ username: req.body.username }, function(err, user) {\n",
        "    if (err) throw err;\n",
        "    if (!user) { //If user with this username does not exists\n",
        "      User.findOne({ email: req.body.email }, function(err, user2) {\n",
        "        if (err) throw err;\n",
        "        if (!user2) { //If user with this email does not exists\n",
        "          var newUser = new TempUser({\n",
        "            username: req.body.username,\n",
        "            email: req.body.email,\n",
        "            password: req.body.password\n",
        "          });\n",
        "          if(newUser.username !== undefined && newUser.email !== undefined\n",
        "            && newUser.password !== undefined && validator.validate(req.body.email)) {\n",
        "              //Create new temp user (need to be validated by email)\n",
        "              newUser.GENERATED_VERIFYING_URL = randtoken.generate(48);\n",
        "              TempUser.create(newUser, function(err, createdTempUser) {\n",
        "                if(err) {\n",
        "                  res.json({ \"success\": false, \"message\": 'Error creating temporal user' });\n",
        "                } else {\n",
        "                  //Send email to the user\n",
        "                  var mailOptions = {\n",
        "                      from: '\"Taskban\" <taskbanapp@gmail.com>', // sender address\n",
        "                      to: newUser.email, // list of receivers\n",
        "                      subject: 'Taskban account activation', // Subject line\n",
        "                      html: 'To activate your account, click in the following URL:</p><p>'\n",
        "                      + config.url + '/users/email-verification/'\n",
        "                      + createdTempUser.GENERATED_VERIFYING_URL +  '</p>'// html body\n",
        "                  };\n",
        "                  // send mail with defined transport object\n",
        "                  transporter.sendMail(mailOptions, function(error, info){\n",
        "                    if(error){\n",
        "                      return console.log(error);\n",
        "                    } else {\n",
        "                      res.json({ \"success\": true, \"message\": 'Temporal user registered. Need email activation' });\n",
        "                      transporter.close();\n",
        "                    }\n",
        "                  });\n",
        "                }\n",
        "              });\n",
        "            }\n",
        "            else {\n",
        "              res.json({ \"success\": false, \"message\": 'User not valid' });\n",
        "            }\n",
        "        } else { //If user with this email already exists\n",
        "          res.json({ \"success\": false, \"message\": 'Registration failed. Email already in use.' });\n",
        "        }\n",
        "      });\n",
        "    }  else if (user) { //If user exists\n",
        "      res.json({ \"success\": false, \"message\": 'Registration failed. Username already exists.' });\n",
        "    }\n",
        "  });\n",
        "});\n",
        "\n",
        "//Verify and activate user account\n",
        "router.get('/users/email-verification/:url', function(req, res) {\n",
        "  TempUser.findOneAndRemove({GENERATED_VERIFYING_URL: req.params.url}, function(err, tempUser) {\n",
        "    if(err) {\n",
        "      res.json({ \"success\": false, \"message\": 'Temporal user with this URL not found' });\n",
        "    } else if(tempUser != null) {\n",
        "      var newUser = new User({\n",
        "        username: tempUser.username,\n",
        "        email: tempUser.email,\n",
        "        password: tempUser.password\n",
        "      });\n",
        "      newUser.save(function(err) { //Save the new user\n",
        "        if (err) {\n",
        "          res.json({ \"success\": false, \"message\": 'Error activating user' });\n",
        "        } else {\n",
        "          //Send email to the user\n",
        "          var mailOptions = {\n",
        "              from: '\"Taskban\" <taskbanapp@gmail.com>', // sender address\n",
        "              to: newUser.email, // list of receivers\n",
        "              subject: 'Taskban account activation', // Subject line\n",
        "              text: 'Your account has been successfully activated. Now you can login with your account. Enjoy Taskban!'\n",
        "          };\n",
        "          transporter.sendMail(mailOptions, function(error, info){\n",
        "            if(error) return console.log(error);\n",
        "            res.json({ \"success\": true, \"message\": 'User successfully registered and activated' });\n",
        "            transporter.close();\n",
        "          });\n",
        "        }\n",
        "      });\n",
        "    } else {\n",
        "      res.json({ \"success\": false, \"message\": 'Error activating user' });\n",
        "    }\n",
        "  });\n",
        "});\n",
        "\n",
        "//Close the current session of the user (delete token on the client side)\n",
        "// body: ...\n",
        "// params: ...\n",
        "// headers: ...\n",
        "router.post('/users/logout', function(req, res) {\n",
        "  res.json({ \"success\": true, \"message\": 'User logout successfully' });\n",
        "});\n",
        "\n",
        "//Check if server is on (request used in android application)\n",
        "// body: ...\n",
        "// params: ...\n",
        "// headers: ...\n",
        "router.get('/checkserverstatus', function(req, res) {\n",
        "  res.json({ \"success\": true, \"message\": 'Server is on' });\n",
        "});\n",
        "\n",
        "/*================================================\n",
        " route middleware to authenticate and check token\n",
        "       All the requests below need token\n",
        "=================================================*/\n",
        "router.use(function(req, res, next) {\n",
        "  //check header or post parameter for token\n",
        "  var token = req.body.token || req.headers['x-access-token'];\n",
        "  if (token) { //decode token\n",
        "    //verifies secret and checks exp\n",
        "    jwt.verify(token, app.get('secret'), function(err, decoded) {\n",
        "      if (err) {\n",
        "        return res.json({ success: false, message: 'Failed to authenticate token.' });\n",
        "      } else {\n",
        "        //if everything is good, save to request for use in other routes\n",
        "        req.decoded = decoded;\n",
        "        next();\n",
        "      }\n",
        "    });\n",
        "  } else {\n",
        "    //if there is no token, return an error\n",
        "    return res.status(403).send({\n",
        "      success: false,\n",
        "      message: 'No token provided.'\n",
        "    });\n",
        "  }\n",
        "});\n",
        "\n",
        "//Get all registered users\n",
        "// body: ...\n",
        "// params: ...\n",
        "// headers: x-access-token\n",
        "router.get('/users', function(req, res) {\n",
        "  User.find({}, function(err, users) {\n",
        "    if(err) {\n",
        "      res.json({\"success\": false, \"message\": \"Cant get users\"});\n",
        "    } else {\n",
        "      res.json({\"success\": true, \"message\": users});\n",
        "    }\n",
        "  });\n",
        "});\n",
        "\n",
        "//Get user information by ID\n",
        "// body: ...\n",
        "// params: id\n",
        "// headers: x-access-token\n",
        "router.get('/users/:id', function(req, res) {\n",
        "  User.findById(req.params.id, function(err, user) {\n",
        "    if(err) {\n",
        "      res.json({\"success\": false, \"message\": \"Cant get the user\"});\n",
        "    } else {\n",
        "      res.json({\"success\": true, \"message\": user});\n",
        "    }\n",
        "  });\n",
        "});\n",
        "\n",
        "/*===========================\n",
        "          Boards API\n",
        "============================*/\n",
        "\n",
        "//GET and POST\n",
        "router.route(\"/boards\")\n",
        "  //Get all kanban boards for all users\n",
        "  // body: ...\n",
        "  // params: ...\n",
        "  // headers: x-access-token\n",
        "  .get(function(req, res) {\n",
        "    Board.find({}, function(err, boards) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error finding boards\"});\n",
        "      } else {\n",
        "        res.json({\"success\": true, \"message\": boards});\n",
        "      }\n",
        "    });\n",
        "  })\n",
        "  //Create new board\n",
        "  // body: name, description, owner\n",
        "  // params: ...\n",
        "  // headers: x-access-token\n",
        "  .post(function(req, res) {\n",
        "    Board.create({ //creates board\n",
        "      name: req.body.name,\n",
        "      description: req.body.description,\n",
        "      owners: [ req.body.owner ]\n",
        "    },\n",
        "    function(err, createdBoard) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error creating board\"});\n",
        "      } else {\n",
        "        res.json({\"success\": true, \"message\": createdBoard});\n",
        "      }\n",
        "    });\n",
        "  });\n",
        "\n",
        "//GET, PUT and DELETE by ID\n",
        "router.route('/boards/:id')\n",
        "  //Get specific board by ID\n",
        "  // body: ...\n",
        "  // params: id\n",
        "  // headers: x-access-token\n",
        "  .get(function(req,res) {\n",
        "    Board.findById(req.params.id, function(err, board) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Board not found\"});\n",
        "      } else {\n",
        "        res.json({\"success\": true, \"message\": board});\n",
        "      }\n",
        "    });\n",
        "  })\n",
        "  //Update board by ID\n",
        "  // body: name, description\n",
        "  // params: id\n",
        "  // headers: x-access-token\n",
        "  .put(function(req,res) {\n",
        "    Board.findById(req.params.id, function(err, board) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Board not found\"});\n",
        "      } else {\n",
        "        if(req.body.name !== undefined) {\n",
        "          board.name = req.body.name; //Edit name\n",
        "        }\n",
        "        if(req.body.description !== undefined) {\n",
        "          board.description = req.body.description; //Edit description\n",
        "        }\n",
        "        board.save(function(err, savedBoard) {\n",
        "          if(err) {\n",
        "            res.json({\"success\": false, \"message\": \"Error saving board\"});\n",
        "          } else {\n",
        "            res.json({\"success\": true, \"message\": savedBoard});\n",
        "          }\n",
        "        });\n",
        "      }\n",
        "    });\n",
        "  })\n",
        "  //Remove board by ID\n",
        "  .delete(function(req,res) {\n",
        "    //Find the board\n",
        "    // body: ...\n",
        "    // params: id\n",
        "    // headers: x-access-token\n",
        "    Board.findById(req.params.id, function(err, board) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Board not found\"});\n",
        "      } else {\n",
        "        //Remove the board\n",
        "        Board.remove({_id : req.params.id}, function(err) {\n",
        "          if(err) {\n",
        "            res.json({\"success\": false, \"message\": \"Error removing board\"});\n",
        "          } else {\n",
        "            //Remove all cards associated to the board ID\n",
        "            Card.remove({board: req.params.id}, function(err) {\n",
        "              if(err) {\n",
        "                res.json({\"success\": false, \"message\": \"Error removing board cards\"});\n",
        "              } else {\n",
        "                res.json({\"success\": true, \"message\": \"Board with id = \" + req.params.id + \" deleted\"});\n",
        "              }\n",
        "            });\n",
        "          }\n",
        "        });\n",
        "      }\n",
        "    });\n",
        "  });\n",
        "\n",
        "//GET and POST for cards\n",
        "router.route('/boards/:id/cards')\n",
        "  //Get all cards for a board\n",
        "  // body: ...\n",
        "  // params: id\n",
        "  // headers: x-access-token\n",
        "  .get(function(req, res) {\n",
        "    Card.find({board: req.params.id}, function(err, cards) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error finding cards\"});\n",
        "      } else {\n",
        "        res.json({\"success\": true, \"message\": cards});\n",
        "      }\n",
        "    });\n",
        "  })\n",
        "  //Create new card for a board\n",
        "  // body: content, category\n",
        "  // params: id\n",
        "  // headers: x-access-token\n",
        "  .post(function(req, res) {\n",
        "    Card.create({\n",
        "      content: req.body.content,\n",
        "      category: req.body.category,\n",
        "      board: req.params.id\n",
        "    }, function(err, card) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error creating cards\"});\n",
        "      } else {\n",
        "        Board.findByIdAndUpdate(\n",
        "          req.params.id,\n",
        "          {$addToSet: {cards: card._id}},\n",
        "          function(err, board) {\n",
        "          if(err) {\n",
        "            res.json({\"success\": false, \"message\": \"Error finding and updating board\"});\n",
        "          } else {\n",
        "            res.json({\"success\": true, \"message\": card});\n",
        "          }\n",
        "        });\n",
        "      }\n",
        "    });\n",
        "  });\n",
        "\n",
        "//GET, PUT and DELETE by ID for cards\n",
        "router.route('/boards/:boardId/cards/:cardId')\n",
        "  //Get card by ID\n",
        "  // body: ...\n",
        "  // params: boardId, cardId\n",
        "  // headers: x-access-token\n",
        "  .get(function(req, res) {\n",
        "    Card.findById(req.params.cardId, function(err, card) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error finding card\"});\n",
        "      } else {\n",
        "        res.json({\"success\": true, \"message\": card});\n",
        "      }\n",
        "    });\n",
        "  })\n",
        "  //Update card by ID\n",
        "  // body: content, category\n",
        "  // params: boardId, cardId\n",
        "  // headers: x-access-token\n",
        "  .put(function(req, res) {\n",
        "    Card.findById(req.params.cardId, function(err, card) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Card not found\"});\n",
        "      } else {\n",
        "        if(req.body.content !== undefined) {\n",
        "          card.content = req.body.content; //Edit content\n",
        "        }\n",
        "        if(req.body.category !== undefined) {\n",
        "          card.category = req.body.category; //Edit category\n",
        "        }\n",
        "        card.save(function(err, savedCard) {\n",
        "          if(err) {\n",
        "            res.json({\"success\": false, \"message\": \"Error saving card\"});\n",
        "          } else {\n",
        "            res.json({\"success\": true, \"message\": savedCard});\n",
        "          }\n",
        "        });\n",
        "      }\n",
        "    })\n",
        "  })\n",
        "  //Delete card by ID\n",
        "  // body: ...\n",
        "  // params: boardId, cardId\n",
        "  // headers: x-access-token\n",
        "  .delete(function(req, res) {\n",
        "    Card.findByIdAndRemove(req.params.cardId, function(err) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error finding and removing card\"});\n",
        "      } else {\n",
        "        Board.update(\n",
        "          {_id: req.params.boardId}, {$pull: {cards: req.params.cardId}},\n",
        "          function(err) {\n",
        "            if(err) {\n",
        "              res.json({\"success\": false, \"message\": \"Error removing card from board\"});\n",
        "            } else {\n",
        "              res.json({\"success\": true, \"message\": \"Card successfully removed\"});\n",
        "            }\n",
        "          });\n",
        "      }\n",
        "    });\n",
        "  });\n",
        "\n",
        "//Get the kanban boards for an user\n",
        "// body: ...\n",
        "// params: id\n",
        "// headers: x-access-token\n",
        "router.route('/boards/owner/:id')\n",
        "  .get(function(req, res) {\n",
        "    Board.find({owners: req.params.id}, function(err, boards) {\n",
        "      if(err) {\n",
        "        res.json({\"success\": false, \"message\": \"Error finding user boards\"});\n",
        "      } else {\n",
        "        res.json({\"success\": true, \"message\": boards});\n",
        "      }\n",
        "    });\n",
        "  });\n",
        "\n",
        "\n",
        "//Start the server\n",
        "app.use(express.static(__dirname + '/'), router);\n",
        "app.listen(config.port);\n",
        "console.log('Magic happens at http://localhost:' + config.port);"
      ]
    }
  ]
}